Introduction On Enums:
 
 1) No Type-Safety: First of all itâ€™s not type-safe; you can assign any valid int value to currency e.g. 99 
     though there is no coin to represent that value.
 2) No Meaningful Printing: printing value of any of these constant will print its numeric value 
     instead of meaningful name of coin e.g. when you print NICKLE it will print "5" instead of "NICKLE"
 3) No namespace: to access the currencyDenom constant we need to prefix class name e.g. CurrencyDenom.PENNY instead of just using PENNY though this can also be achieved by using static import in JDK 1.5

Advantages of Enums:
**********************

Java Enum is the answer of all this limitation. 
Enum in Java is type-safe, provides meaningful String names and has their own namespace. 
Now let's see the same example using Enum in Java:

Read more: http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4zqvTXBoZ

public enum Currency {PENNY, NICKLE, DIME, QUARTER};  //all are Enum Constants ,Enum is a type like class and interface in Java

Point -1 :
***********

public enum Currency {
PENNY, NICKLE, DIME, QUARTER
};
Currency coin = Currency.PENNY;
coin = 1; //compilation error

Point -2 :
2) Enum in Java are reference types like class or interface and you can define constructor, 
   methods and variables inside java Enum which makes it more powerful than Enum in
   C and C++ as shown in next example of Java Enum type.

Point -3 :

3)Since constants defined inside Enum in Java are final you can safely 
compare them using "==", the equality operator as shown in following example of  Java Enum:

Note:
  By the way comparing objects using == operator is not recommended, 
  Always use equals() method or compareTo() method to compare Objects.
  
Point-4:
Java compiler automatically generates static values() 
method for every enum in java. Values() method returns array of 
Enum constants in the same order they have listed in Enum and you can use values() 
to iterate over values of Enum  in Java as shown in below example:


Point-5:

Two new collection classes EnumMap and EnumSet are added into collection package to support Java Enum. 
These classes are a high-performance implementation of Map and Set interface in Java and we 
should use this whenever there is any opportunity.

for(Currency coin: Currency.values()){
   System.out.println("coin: " + coin);
}


Read more: http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4zr2qjqpz

Comparing Enums with == method 

Currency usCoin = Currency.DIME;
if(usCoin == Currency.DIME){
  System.out.println("enum in java can be compared using ==");
}


Read more: http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4zqyIWbU2


Reference URL : https://www.mkyong.com/java/java-enum-example/
ENUMS:
******

1. Basic Enum values : public enum Users {LAKE,GREEN}; we can use it as simple string validation.

2. ENUM+ Instance filed : public enum Users(CHERRY('Michigan'),APPLE('Michigan') private string location ; '
 Users(String location){this.location =location;} public String getlocation(){return location;};
Usage:  System.out.println(Users.CHERRY.location;

3. ENUM+Method+SomeLogic:
public enum Operation {
    PLUS,
    MINUS,
    TIMES,
    DIVIDE;

    double calculate(double x, double y) {
        switch (this) {
            case PLUS:
                return x + y;
            case MINUS:
                return x - y;
            case TIMES:
                return x * y;
            case DIVIDE:
                return x / y;
            default:
                throw new AssertionError("Unknown operations " + this);
        }
    }

}

public class Test {

    public static void main(String[] args) {

        double result = Operation.PLUS.calculate(1, 2);
        System.out.println(result); //3.0

    }

}


4. Loop ENUM Object 
for (UserStatus status : UserStatus.values()) {
            System.out.println(status);
        }
5. Compare 
 Users us= Users.CHERRY

        if(rir == Users.CHERRY
            System.out.println("This is APNIC : " + rir.url());
        }

        
1.Validate Enum values with Database records or look up???

2. we can use it for String validation ???
or String with valuescombination  or assign values to it 
